import{U as a,a as d,S as m}from"./token-types-D2R8hC8p.js";import{d as D}from"./fflate-D0DoR3vL.js";import{i as S}from"./debug-Dqg9INeJ.js";const c={LocalFileHeader:67324752,DataDescriptor:134695760,CentralFileHeader:33639248,EndOfCentralDirectory:101010256},w={get(e){return a.get(e,6),{signature:d.get(e,0),compressedSize:d.get(e,8),uncompressedSize:d.get(e,12)}},len:16},O={get(e){const i=a.get(e,6);return{signature:d.get(e,0),minVersion:a.get(e,4),dataDescriptor:!!(i&8),compressedMethod:a.get(e,8),compressedSize:d.get(e,18),uncompressedSize:d.get(e,22),filenameLength:a.get(e,26),extraFieldLength:a.get(e,28),filename:null}},len:30},x={get(e){return{signature:d.get(e,0),nrOfThisDisk:a.get(e,4),nrOfThisDiskWithTheStart:a.get(e,6),nrOfEntriesOnThisDisk:a.get(e,8),nrOfEntriesOfSize:a.get(e,10),sizeOfCd:d.get(e,12),offsetOfStartOfCd:d.get(e,16),zipFileCommentLength:a.get(e,20)}},len:22},C={get(e){const i=a.get(e,8);return{signature:d.get(e,0),minVersion:a.get(e,6),dataDescriptor:!!(i&8),compressedMethod:a.get(e,10),compressedSize:d.get(e,20),uncompressedSize:d.get(e,24),filenameLength:a.get(e,28),extraFieldLength:a.get(e,30),fileCommentLength:a.get(e,32),relativeOffsetOfLocalHeader:d.get(e,42),filename:null}},len:46};function L(e){const i=new Uint8Array(d.len);return d.put(i,0,e),i}const f=S("tokenizer:inflate"),p=256*1024,y=L(c.DataDescriptor),h=L(c.EndOfCentralDirectory);class B{constructor(i){this.tokenizer=i,this.syncBuffer=new Uint8Array(p)}async isZip(){return await this.peekSignature()===c.LocalFileHeader}peekSignature(){return this.tokenizer.peekToken(d)}async findEndOfCentralDirectoryLocator(){const i=this.tokenizer,r=Math.min(16*1024,i.fileInfo.size),n=this.syncBuffer.subarray(0,r);await this.tokenizer.readBuffer(n,{position:i.fileInfo.size-r});for(let t=n.length-4;t>=0;t--)if(n[t]===h[0]&&n[t+1]===h[1]&&n[t+2]===h[2]&&n[t+3]===h[3])return i.fileInfo.size-r+t;return-1}async readCentralDirectory(){if(!this.tokenizer.supportsRandomAccess()){f("Cannot reading central-directory without random-read support");return}f("Reading central-directory...");const i=this.tokenizer.position,r=await this.findEndOfCentralDirectoryLocator();if(r>0){f("Central-directory 32-bit signature found");const n=await this.tokenizer.readToken(x,r),t=[];this.tokenizer.setPosition(n.offsetOfStartOfCd);for(let s=0;s<n.nrOfEntriesOfSize;++s){const o=await this.tokenizer.readToken(C);if(o.signature!==c.CentralFileHeader)throw new Error("Expected Central-File-Header signature");o.filename=await this.tokenizer.readToken(new m(o.filenameLength,"utf-8")),await this.tokenizer.ignore(o.extraFieldLength),await this.tokenizer.ignore(o.fileCommentLength),t.push(o),f(`Add central-directory file-entry: n=${s+1}/${t.length}: filename=${t[s].filename}`)}return this.tokenizer.setPosition(i),t}this.tokenizer.setPosition(i)}async unzip(i){const r=await this.readCentralDirectory();if(r)return this.iterateOverCentralDirectory(r,i);let n=!1;do{const t=await this.readLocalFileHeader();if(!t)break;const s=i(t);n=!!s.stop;let o;if(await this.tokenizer.ignore(t.extraFieldLength),t.dataDescriptor&&t.compressedSize===0){const u=[];let l=p;f("Compressed-file-size unknown, scanning for next data-descriptor-signature....");let g=-1;for(;g<0&&l===p;){l=await this.tokenizer.peekBuffer(this.syncBuffer,{mayBeLess:!0}),g=F(this.syncBuffer.subarray(0,l),y);const z=g>=0?g:l;if(s.handler){const k=new Uint8Array(z);await this.tokenizer.readBuffer(k),u.push(k)}else await this.tokenizer.ignore(z)}f(`Found data-descriptor-signature at pos=${this.tokenizer.position}`),s.handler&&await this.inflate(t,H(u),s.handler)}else s.handler?(f(`Reading compressed-file-data: ${t.compressedSize} bytes`),o=new Uint8Array(t.compressedSize),await this.tokenizer.readBuffer(o),await this.inflate(t,o,s.handler)):(f(`Ignoring compressed-file-data: ${t.compressedSize} bytes`),await this.tokenizer.ignore(t.compressedSize));if(f(`Reading data-descriptor at pos=${this.tokenizer.position}`),t.dataDescriptor&&(await this.tokenizer.readToken(w)).signature!==134695760)throw new Error(`Expected data-descriptor-signature at position ${this.tokenizer.position-w.len}`)}while(!n)}async iterateOverCentralDirectory(i,r){for(const n of i){const t=r(n);if(t.handler){this.tokenizer.setPosition(n.relativeOffsetOfLocalHeader);const s=await this.readLocalFileHeader();if(s){await this.tokenizer.ignore(s.extraFieldLength);const o=new Uint8Array(n.compressedSize);await this.tokenizer.readBuffer(o),await this.inflate(s,o,t.handler)}}if(t.stop)break}}inflate(i,r,n){if(i.compressedMethod===0)return n(r);f(`Decompress filename=${i.filename}, compressed-size=${r.length}`);const t=D(r);return n(t)}async readLocalFileHeader(){const i=await this.tokenizer.peekToken(d);if(i===c.LocalFileHeader){const r=await this.tokenizer.readToken(O);return r.filename=await this.tokenizer.readToken(new m(r.filenameLength,"utf-8")),r}if(i===c.CentralFileHeader)return!1;throw i===3759263696?new Error("Encrypted ZIP"):new Error("Unexpected signature")}}function F(e,i){const r=e.length,n=i.length;if(n>r)return-1;for(let t=0;t<=r-n;t++){let s=!0;for(let o=0;o<n;o++)if(e[t+o]!==i[o]){s=!1;break}if(s)return t}return-1}function H(e){const i=e.reduce((t,s)=>t+s.length,0),r=new Uint8Array(i);let n=0;for(const t of e)r.set(t,n),n+=t.length;return r}export{B as Z};
